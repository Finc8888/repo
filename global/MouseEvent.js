/**
 * @fileOverview <code>jsgl.MouseEvent</code> class implementation.
 * @author Tomas Rehorek
 * @since version 2.0
 */

/**
 * @class Mouse event API class.
 * @constructor
 * //@description Creates new instance of <code>jsgl.MouseEvent</code>.
 * //Contains few hacks making detection of coordinates to work properly on various
 * //browsers.
 * //@param {number} x The x-coordinate of the event
 * //@param {number} y The y-coordinate of the event
 * //@param {number} eventType The type of the event. If not provided,
 * //<code>jsgl.MouseEvent.UNKNOWN</code> will be used.
 * //@param {MouseEvent} eventObject The event object generated by the web browser.
 * @since version 2.0
 */
jsgl.MouseEvent = function(x, y, eventType, sourceElement, eventObject) {

  /**
   * Type of the mouse event.
   * @type number
   * @private
   */
  this.eventType = eventType || jsgl.MouseEvent.UNKNOWN;

  /**
   * Location of the event in the coordspace of element's container.
   * @type jsgl.Vector2D
   * @private
   */
  this.location = new jsgl.Vector2D(x, y);

  /**
   * The element that the event occured on.
   * @type jsgl.elements.AbstractElement
   * @private
   */
  this.sourceElement = sourceElement || null;

    /**
   * The original event object.
   * @type MouseEvent
   * @private
   */
  this.eventObject = eventObject || null;
}

jsgl.MouseEvent.fromJsglElement = function(eventObject, jsglElement, eventType) {

  var location;

  /* Begin:  Determine location */
  if(jsgl.util.BrowserInfo.usesWindowEvent) {

    if(jsgl.util.BrowserInfo.isOpera) {

      location = new jsgl.Vector2D(eventObject.pageX, eventObject.pageY);
    }
    else {

      location = new jsgl.Vector2D(eventObject.x, eventObject.y);
    }

    location.X -= parseInt(jsglElement.getPanel().getHolderElement().style.borderLeftWidth) || 0;
    location.Y -= parseInt(jsglElement.getPanel().getHolderElement().style.borderTopWidth) || 0;

  }
  else {

    location = new jsgl.Vector2D(eventObject.layerX, eventObject.layerY);
  }

  var panel = jsglElement.getPanel();

  var offset = new jsgl.Vector2D();
  var currContainer = jsglElement.getContainer();

  do {

    if(currContainer != panel) {

      offset = offset.add(currContainer.getLocation());
      currContainer = currContainer.getContainer();
    }

  }
  while(currContainer != panel);

  if(jsgl.util.BrowserInfo.isOpera) {

    var currElement = jsglElement.getPanel().getHolderElement();

    while(currElement != document.body) {

      offset.X += currElement.offsetLeft;
      offset.Y += currElement.offsetTop;

      currElement = currElement.offsetParent;
    }
  }

  location = location.subtract(offset);
  /* End: Determine location */

  var jsglElement = null,
      currElement = eventObject.srcElement || eventObject.target;

  do {

    if(currElement.jsglElement) {

      jsglElement = currElement.jsglElement;
      break;
    }

    currElement = currElement.parentNode;
  }
  while(currElement != document.body);

  return new jsgl.MouseEvent(location.X, location.Y, eventType, jsglElement, eventObject);
}

jsgl.MouseEvent.fromJsglPanel = function(eventObject, panelObject, eventType) {

  var location = new jsgl.Vector2D();

  if(jsgl.util.BrowserInfo.usesWindowEvent) {

    if(jsgl.util.BrowserInfo.isOpera) {

      location = new jsgl.Vector2D(eventObject.pageX, eventObject.pageY);
    }
    else {

      location = new jsgl.Vector2D(eventObject.x, eventObject.y);
    }

    location.X -= parseInt(panelObject.getHolderElement().style.borderLeftWidth) || 0;
    location.Y -= parseInt(panelObject.getHolderElement().style.borderTopWidth) || 0;

  }
  else {

    location = new jsgl.Vector2D(eventObject.layerX, eventObject.layerY);
  }

  if(jsgl.util.BrowserInfo.isOpera) {

    var currElement = panelObject.getHolderElement();

    while(currElement != document.body) {

      location.X -= currElement.offsetLeft;
      location.Y -= currElement.offsetTop;

      currElement = currElement.offsetParent;
    }
  }

  var jsglElement = null,
      currElement = eventObject.srcElement || eventObject.target;

  do {

    if(currElement.jsglElement) {

      jsglElement = currElement.jsglElement;
      break;
    }

    currElement = currElement.parentNode;
  }
  while(currElement != document.body);

  return new jsgl.MouseEvent(location.X, location.Y, eventType, jsglElement, eventObject);
}

/**
 * Unknown type of event (indicates possible error).
 * @constant
 */
jsgl.MouseEvent.UNKNOWN = 0;

/**
 * Click mouse event type. Indicates that mouse button has been pushed and
 * released at some location within the element.
 * @constant
 */
jsgl.MouseEvent.CLICK = 1;

/**
 * Double-click mouse event type. Indicates that mouse button has been pushed
 * and released twice at some location within the element.
 * @constant
 */
jsgl.MouseEvent.DOUBLE_CLICK = 2;

/**
 * Mouse-down event type. Indicates that mouse button has been pushed at some
 * location within the element.
 * @constant
 */
jsgl.MouseEvent.DOWN = 3;

/**
 * Mouse-up event type. Indicates that mouse button has been released at some
 * location within the element.
 * @contant
 */
jsgl.MouseEvent.UP = 4;

/**
 * Mouse-move event type. Indicates that the mouse has moved at some location
 * within the element.
 * @constant
 */
jsgl.MouseEvent.MOVE = 5;

/**
 * Mouse-over event type. Indicates that the mouse has entered the element.
 * @constant
 */
jsgl.MouseEvent.OVER = 6;

/**
 * Mouse-out event type. Indicates that the mouse has left the element.
 * @constant
 */
jsgl.MouseEvent.OUT = 7;

/**
 * Context menu event type. Indicates that the mouse has been right-clicked.
 * @constant
 */
jsgl.MouseEvent.CONTEXTMENU = 8;

/**
 * @description Gets the X-coordinate of the location at which the event took
 * place.
 * @methodOf jsgl.MouseEvent#
 * @returns {number}
 * @since version 2.0
 */
jsgl.MouseEvent.prototype.getX = function() {

  return this.location.X;
}

/**
 * @description Gets the Y-coordinate of the location at which the event took
 * place.
 * @methodOf jsgl.MouseEvent#
 * @returns {number}
 * @since version 2.0
 */
jsgl.MouseEvent.prototype.getY = function() {

  return this.location.Y;
}

/**
 * @description Gets the location at which the event took place as an instance
 * of <code>jsgl.Vector2D</code> object.
 * @methodOf jsgl.MouseEvent#
 * @returns {jsgl.Vector2D}
 * @since version 2.0
 */
jsgl.MouseEvent.prototype.getLocation = function() {

  return jsgl.cloneObject(this.location);
}

/**
 * @description Gets the JSGL element on which the event took place. If there
 * is no such element, e.g. if the event has been captured at an empty part of
 * a <code>jsgl.Panel</code> object, <code>null</code> is returned.
 */
jsgl.MouseEvent.prototype.getSourceElement = function() {

  return this.sourceElement;
}

/**
 * @description Gets the state of the Alt key for the mouse event.
 * @methodOf jsgl.MouseEvent#
 * @returns {Boolean}
 */
jsgl.MouseEvent.prototype.isAltKey = function() {

  return !!this.eventObject && this.eventObject.altKey;
}

/**
 * @description Gets the state of the Ctrl key for the mouse event.
 * @methodOf jsgl.MouseEvent#
 * @returns {Boolean}
 */
jsgl.MouseEvent.prototype.isCtrlKey = function() {

  return !!this.eventObject && this.eventObject.ctrlKey;
}

/**
 * @description Gets the state of the Meta key for the mouse event.
 * @methodOf jsgl.MouseEvent#
 * @returns {Boolean}
 */
jsgl.MouseEvent.prototype.isMetaKey = function() {

  return !!this.eventObject && this.eventObject.metaKey;
}

/**
 * @description Gets the state of the Shift key for the mouse event.
 * @methodOf jsgl.MouseEvent#
 * @returns {Boolean}
 */
jsgl.MouseEvent.prototype.isShiftKey = function() {

  return !!this.eventObject && this.eventObject.shiftKey;
}

/**
 * @description Gets the type of the event in processing of which the current
 * mouse event object has been generated.
 * @methodOf jsgl.MouseEvent#
 * @returns {Number}
 * @since version 2.0
 */
jsgl.MouseEvent.prototype.getEventType = function() {

  return this.eventType;
}
